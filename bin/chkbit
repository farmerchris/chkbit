#!/usr/bin/env node
"use strict";

var Promise=require("bluebird"); // use bluebird promises, es6-shim is buggy
require("es6-shim"); // es6 support
var chkbit=require('../lib/chkbit.js');

function getProcessArgs() {
  return process.argv.slice(2).reduce(function(args, x) {
    if (x[0]==="-") { var i=x.indexOf("="); args[x.substr(1, i>0?i-1:undefined)]=i>0?x.substr(i+1):true; }
    else args.params.push(x);
    return args;
  }, { params: [] });
}

function check(promise) {
  promise.catch(function(err) {
    var text=err.toString();
    console.error(text);
    if (opt.verbose) console.error(err.stack);
    process.exit(-1);
  });
}

var args=getProcessArgs();
if (!args.i) {
  var p=parseInt(args.p);
  chkbit.setMaxParallel(Number.isSafeInteger(p)?p:1);
} else chkbit.useNativeMd5=false;

var opt={
  status: function(stat, file) { console.log(stat, file); },
  overwrite: args.force,
  verbose: args.v,
  readonly: args.verify,
  addonly: args.add,
};

if (args.params.length<1) {
  console.log("usage: chkbit [options] path [...]");
  console.log("The options are as follows:");
  console.log("-verify verify without updating the .chkbit files");
  console.log("-add    add and update files only - don't verify checksums");
  console.log("-force  overwrite inconsistent checksum (repair)");
  console.log("-del    delete all .chkbit files");
  console.log("-p=N    number of parallel operations (default 5)");
  console.log("-i      use node's md5 (ignores -p)");
  console.log("-v      verbose output");
  console.log("Status codes:");
  console.log("'E'     error, md5 mismatch");
  console.log("'a'     add to index");
  console.log("'u'     update md5");
  console.log("' '     not modified (with verbose)");
  console.log("'r'     repair md5 (with force repair)");
  console.log("'?'     unknown (with verify)");
} else if (args.del) {
  check(Promise.all(args.params.map(chkbit.del.bind(null, opt)))
  .then(function(all) { return all.reduce(function(sum, x) { return sum+x; }); })
  .then(function(res) { console.error("removed chkbit from "+res+" dirs"); }));
} else {
  check(Promise.all(args.params.map(chkbit.verify.bind(null, opt)))
  .then(function(all) { return all.reduce(function(sum, x) { return sum+x; }); })
  .then(function(res) {
    if (res) {
      console.error("error: detected "+res+" file(s) with bitrot!");
      process.exit(res);
    }
  }));
}
